// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ERC6551AccountCreated extends ethereum.Event {
  get params(): ERC6551AccountCreated__Params {
    return new ERC6551AccountCreated__Params(this);
  }
}

export class ERC6551AccountCreated__Params {
  _event: ERC6551AccountCreated;

  constructor(event: ERC6551AccountCreated) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get implementation(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get salt(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get chainId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get tokenContract(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Registry6551 extends ethereum.SmartContract {
  static bind(address: Address): Registry6551 {
    return new Registry6551("Registry6551", address);
  }

  account(
    implementation: Address,
    salt: Bytes,
    chainId: BigInt,
    tokenContract: Address,
    tokenId: BigInt,
  ): Address {
    let result = super.call(
      "account",
      "account(address,bytes32,uint256,address,uint256):(address)",
      [
        ethereum.Value.fromAddress(implementation),
        ethereum.Value.fromFixedBytes(salt),
        ethereum.Value.fromUnsignedBigInt(chainId),
        ethereum.Value.fromAddress(tokenContract),
        ethereum.Value.fromUnsignedBigInt(tokenId),
      ],
    );

    return result[0].toAddress();
  }

  try_account(
    implementation: Address,
    salt: Bytes,
    chainId: BigInt,
    tokenContract: Address,
    tokenId: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "account",
      "account(address,bytes32,uint256,address,uint256):(address)",
      [
        ethereum.Value.fromAddress(implementation),
        ethereum.Value.fromFixedBytes(salt),
        ethereum.Value.fromUnsignedBigInt(chainId),
        ethereum.Value.fromAddress(tokenContract),
        ethereum.Value.fromUnsignedBigInt(tokenId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createAccount(
    implementation: Address,
    salt: Bytes,
    chainId: BigInt,
    tokenContract: Address,
    tokenId: BigInt,
  ): Address {
    let result = super.call(
      "createAccount",
      "createAccount(address,bytes32,uint256,address,uint256):(address)",
      [
        ethereum.Value.fromAddress(implementation),
        ethereum.Value.fromFixedBytes(salt),
        ethereum.Value.fromUnsignedBigInt(chainId),
        ethereum.Value.fromAddress(tokenContract),
        ethereum.Value.fromUnsignedBigInt(tokenId),
      ],
    );

    return result[0].toAddress();
  }

  try_createAccount(
    implementation: Address,
    salt: Bytes,
    chainId: BigInt,
    tokenContract: Address,
    tokenId: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createAccount",
      "createAccount(address,bytes32,uint256,address,uint256):(address)",
      [
        ethereum.Value.fromAddress(implementation),
        ethereum.Value.fromFixedBytes(salt),
        ethereum.Value.fromUnsignedBigInt(chainId),
        ethereum.Value.fromAddress(tokenContract),
        ethereum.Value.fromUnsignedBigInt(tokenId),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateAccountCall extends ethereum.Call {
  get inputs(): CreateAccountCall__Inputs {
    return new CreateAccountCall__Inputs(this);
  }

  get outputs(): CreateAccountCall__Outputs {
    return new CreateAccountCall__Outputs(this);
  }
}

export class CreateAccountCall__Inputs {
  _call: CreateAccountCall;

  constructor(call: CreateAccountCall) {
    this._call = call;
  }

  get implementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get salt(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get chainId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get tokenContract(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class CreateAccountCall__Outputs {
  _call: CreateAccountCall;

  constructor(call: CreateAccountCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
